plugins {
    id("io.micronaut.build.internal.serde-base")
    id("java")
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("me.champeau.jmh") version "0.7.2"
}

sourceSets {
    create("typeCheckTest") {
        compileClasspath += sourceSets.jmh.output
        runtimeClasspath += sourceSets.jmh.output
    }
}

dependencies {
    annotationProcessor(projects.micronautSerdeProcessor)
    annotationProcessor(mn.micronaut.inject.java)
    jmhAnnotationProcessor(libs.jmh.generator.annprocess)
    jmhAnnotationProcessor(mn.micronaut.inject.java)
    jmhAnnotationProcessor(projects.micronautSerdeProcessor)

    implementation(projects.micronautSerdeJackson)
    implementation(projects.micronautSerdeSupport)
    implementation(mn.micronaut.jackson.databind)


    jmh(libs.jmh.core)
    runtimeOnly(mnLogging.logback.classic)

    typeCheckTestImplementation(mnTest.junit.jupiter.engine)
    typeCheckTestImplementation(mnTest.micronaut.test.type.pollution)
    typeCheckTestImplementation(mnTest.bytebuddy)
    typeCheckTestImplementation(mnTest.bytebuddy.agent)
}

configurations {
    typeCheckTestImplementation.extendsFrom(jmhImplementation, implementation)
    typeCheckTestRuntimeOnly.extendsFrom(jmhRuntimeOnly, runtimeOnly)
}

jmh {
    includes = ["io.micronaut.serde.StartupBenchmark"]
    fork = 10
    iterations = 1
    warmupIterations = 0
    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('typeCheckTest', Test) {
    description = "Runs type check tests."
    group = "verification"

    testClassesDirs = sourceSets.typeCheckTest.output.classesDirs
    classpath = sourceSets.typeCheckTest.runtimeClasspath

    useJUnitPlatform()
}

check.dependsOn typeCheckTest

shadowJar {
    mergeServiceFiles()
}

configurations.configureEach {
    resolutionStrategy.preferProjectModules()
}
